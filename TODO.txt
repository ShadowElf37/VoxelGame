- GPU visibility computation into mesh generator 
- chunks cache meshes and only regenerate themselves upon block set
- chunks store neighbors for quick lookup

- place/destroy block, mouse click
- update visibility and mesh when world calls a block update (possibly cpu side re visibility when a single block is updated)
- chunk loading/unloading

- block proto integration with transparency (sends new Chunk::transparencies array with 0 solid or 1 glass/air)
- glass block

- terrain generation from perlin noise

- pause menu with egui-wgpu and state condition for key presses
- fog with noise
- transparency pass

- lods

- use vertex indices in render pass to do cpu-side frustum/occlusion culling


- sky shader (even if it's just solid color, currently &world is passed to the renderer which is weird)
- radiance cascades

- dont duplicate e.g. dirt.png when loading textures (for dirt and grass block) - have it set the offset to the previous texture's index after finding it




lighting, physics in thread
own their own clocks (change nomenclature to "tick" instead of "frame")
have internal fences to rate limit
access lighting array and e.pos/e.vel (or make a new e.PhysState) using mutex



