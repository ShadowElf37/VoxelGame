- the meshes should not be built mirrored like the UVs are, in squares_to_vertices() - somehow  you must set all the basis vectors to be not-mirrored, but ensure the UVs do not flip inappropriately

- GPU visibility computation into mesh generator (updates when world calls a block update)
- block proto integration with texturing

- block proto integration with transparency (sends new Chunk::transparencies array with 0 solid or 1 glass/air)
- glass block

- ECS

- world holds chunks; chunk loading/unloading (just dynamically generate for now)
- terrain generation from perlin noise

- gravity and ECS physics system

- pause menu and state condition for key presses
- fog with noise
- transparency pass

- lods

- use vertex indices in render pass to do cpu-side frustum/occlusion culling





lighting, physics in thread
own their own clocks (change nomenclature to "tick" instead of "frame")
have internal fences to rate limit
access lighting array and e.pos/e.vel (or make a new e.PhysState) using mutex
event_loop accesses mutexes more/less often than they're written to


cpu/compute calculates visible FACES
GPU instance the faces, have an array on gpu of visible faces with texture ids

saving chunks is just block_id,BlockProto does most of the work

camera at 1.8m



